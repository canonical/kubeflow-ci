# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

import importlib
import pathlib

send_scan = importlib.import_module("scripts.cve-reports.send-scan")

BASE_FOLDER = pathlib.Path(send_scan.__file__).parent
TESTS_FOLDER = BASE_FOLDER.joinpath("tests")


def test_empty_report_json():
    json_path = TESTS_FOLDER.joinpath("test-empty-report.json")

    records = send_scan.parse_json(json_path)
    assert len(records) == 0, "Expected to get 0 records."


def test_report_json():
    json_path = TESTS_FOLDER.joinpath("test-report.json")

    records = send_scan.parse_json(json_path)
    assert len(records) == 32, "Expected to get 32 records."


def test_empty_report_sarif():
    sarif_path = TESTS_FOLDER.joinpath("test-empty-report.sarif")

    records = send_scan.parse_sarif(sarif_path)
    assert len(records) == 0, "Expected to get 0 records."


def test_report_sarif():
    sarif_path = TESTS_FOLDER.joinpath("test-report.sarif")

    records = send_scan.parse_sarif(sarif_path)
    assert len(records) == 32, "Expected to get 32 records."


def test_filter_records():
    sarif_path = TESTS_FOLDER.joinpath("test-report.sarif")
    records = send_scan.parse_sarif(sarif_path)
    priority = send_scan.PRIORITY_HIGH
    level = send_scan.priority_to_level_map[priority]

    _, result, excluded = send_scan.filter_records(records, level, [])

    assert len(result) == 20, f"Expected to get 20 {priority} records."
    assert len(excluded) == 12, f"Expected to exclude 12 lower than {priority} records."

    for record in result:
        record_level = send_scan.priority_to_level_map[record["priority"]]
        assert (
            record_level >= level
        ), f"Expected result records to have priority level {level} or higher. {record['name']} has {record_level}."

    for record in excluded:
        record_level = send_scan.priority_to_level_map[record["priority"]]
        assert (
            record_level < level
        ), f"Expected excluded records to have priority level less than {level}. {record['name']} has {record_level}."


def test_filter_cisa_records():
    sarif_path = TESTS_FOLDER.joinpath("test-report.sarif")
    records = send_scan.parse_sarif(sarif_path)
    priority = send_scan.PRIORITY_HIGHEST
    level = send_scan.priority_to_level_map[priority]
    cisa_cve_id = "CVE-2022-2873"

    cisa_cves, other_cves, excluded = send_scan.filter_records(records, level, [cisa_cve_id])

    assert len(cisa_cves) == 1, f"Expected to get 1 CISA CVE record."
    assert len(other_cves) == 7, f"Expected to get 20 {priority} records."
    assert len(excluded) == 24, f"Expected to exclude 12 lower than {priority} records."

    for record in cisa_cves:
        assert (
            cisa_cve_id == record["cve_id"]
        ), "Expected returned CISA CVEs to only contain given IDs."

    for record in other_cves:
        assert (
            cisa_cve_id != record["cve_id"]
        ), "Expected returned other CVEs to not contain CISA CVE IDs."

    for record in excluded:
        assert (
            cisa_cve_id != record["cve_id"]
        ), "Expected excluded CVEs to not contain CISA CVE IDs."


def test_update_cisa_records():
    records = [
        {
            "name": "foo",
            "priority": send_scan.PRIORITY_LOWEST,
        },
        {
            "name": "foo",
            "priority": send_scan.PRIORITY_HIGHEST,
        },
    ]

    send_scan.update_cisa_records(records)

    assert send_scan.PRIORITY_HIGH == records[0]["priority"]
    assert send_scan.PRIORITY_HIGHEST == records[1]["priority"]

    for record in records:
        assert record["name"].startswith("[CISA] ")
