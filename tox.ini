[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, unit

[vars]
scripts_path = {toxinidir}/scripts/
scripts_test_path = {toxinidir}/scripts/tests
all_path = {[vars]scripts_path} {[vars]scripts_test_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]scripts_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
  KUBECONFIG

[testenv:update-requirements]
allowlist_externals =
    bash
    find
    pip-compile
    xargs
commands = 
; uses 'bash -c' because piping didn't work in regular tox commands
  pip-compile requirements-fmt.in
  pip-compile {toxinidir}/scripts/release-charms/requirements.in
  bash -c 'find . -type f -name "requirements*.in" | xargs --replace=\{\} pip-compile --resolver=backtracking \{\}'
deps =
    pip-tools
description = Update requirements files by executing pip-compile on all requirements*.in files, including those in subdirs.

[testenv:fmt]
commands =
    isort {[vars]all_path}
    black {[vars]all_path}
deps =
    -r requirements-fmt.txt
description = Apply coding style standards to code

[testenv:lint]
commands =
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    codespell {toxinidir}/. --skip {toxinidir}/./.git --skip {toxinidir}/./.tox \
      --skip {toxinidir}/./build --skip {toxinidir}/./lib --skip {toxinidir}/./venv \
      --skip {toxinidir}/./.mypy_cache \
      --skip {toxinidir}/./icon.svg --skip *.json.tmpl \
      --skip {toxinidir}/./cannon_runs --skip "*.json" --skip "*.sarif"
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}
deps =
    -r requirements-lint.txt
description = Check code against coding style standards

[testenv:branch_creation]
commands = python3 ./scripts/branch_creation.py {posargs}
deps = 
  -r requirements-branch_creation.txt

description = Run branch creation script
passenv =
  KUBEFLOW_BOT_TOKEN

[testenv:test_branch_creation]
commands =
    pytest -v --tb native {[vars]scripts_test_path}/test_branch_creation.py --log-cli-level=INFO -s {posargs}
deps =
    -r requirements-test_branch_creation.txt
description = Test branch creation

[testenv:test_batch_release_charms]
commands =
    pytest -v --tb native {[vars]scripts_path}/release-charms/. --log-cli-level=INFO -s {posargs}
deps =
    -r requirements-test_batch_release_charms.txt
description = Test tools for batch-releasing multiple charms


